分类:
1.map或set
(1)two sum 一个数组，找到两个数之和等于target，返回目标下标
(3)Longest Substring Without Repeating Characters 在一个字符串中，找到最长不重复的子串（子串需连续）
   用双指针结合一个set，没有重复时，j指针一直往后走，遇到重复时，i指针+1
2.链表
(2)add two numbers 链表加法，从前往后加（注意两个链表长度可能不一样，注意进位的处理）
3.二分
(4)Median of Two Sorted Arrays  两个有序数组A,B，长度m,n，找到中位数。
   可以将问题转化为在[0,m]中找一个i，使得B[j-1]<=A[i]&&A[i-1]<=B[j],j=(m+n+1)/2,即i+j为一半的位置。
   在0，m中二分搜索，有三种情况：
   1.B[j-1]<=A[i] and A[i-1]<=B[j] 找到了i
     在这种情况下，median=
     max(A[i-1],B[j-1]),当m+n是奇数时
     [max(A[i-1],B[j-1])+min(A[i],B[j])]/2,当m+n是偶数时
   2.B[j-1]>A[i]  增加i
   3.A[i-1]>B[j]  减小i
4.动态规划
(5)Longest Palindromic Substring 最长回文子串
   二维动规。距离由小到大。dp[i][j]=dp[i+1][j-1]。
(10)Regular Expression Matching 简单正则匹配
   二维动规。a，b两个字符串，dp[i][j]代表a从i开始和b从j开始是不是匹配的，最后看dp[0][0]即可。
   i：a.length to 0,j：b.length-1 to 0,
   match=a.charAt(i)==b.charAt(j)||b.charAt(j)=='.'
   if(j!=b.length-1&&b.charAt(j+1)=='*') dp[i][j]=dp[i][j+2]||match&&dp[i+1][j]
   else dp[i][j]=match&&dp[i+1][j+1]
5.数学
(7)Reverse Integer.翻转整数。
   输入是有符号整数，翻转后溢出输出0。
   关键计算：res=res*10+x%10.x=x/10. 判断溢出的条件是:Math.abs(res)>Integer.MAX_VALUE/10
(8)String to Integer.(atoi)
   1.滤空格。2.正负判断。3.注意判断溢出 这里比7多一个条件：res==Integer.MAX_VALUE/10&&tmp>7
(9)Palindrome Number 判断回文数。构造另一个数，使得从中间切开原来的数，两边相等即是回文数。
6.双指针 
(11)Container With Most Water.给一个长度数组，和x轴围成的长方形面积求最大。
    双指针从两边往中间靠，往中间走的时候选短的那边.
7.其他
(6)ZigZag Conversion。以折线形式显示字符串，并按照正常顺序输出。
   例：字符串（PAYPALISHIRING）
       P   A   H   N
       A P L S I I G
       Y   I   R
      结果为:PAHNAPLSIIGYIR
   解法：找规律，一个circle是numRows+numRows-2，分边界和非边界两种情况讨论。
 (12)Integer to Roman。
   
   
   
